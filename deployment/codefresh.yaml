version: '1.0'
kind: pipeline
metadata:
  name: airbag/build&publish
  project: airbag
spec:
  terminationPolicy:
    - type: branch
      event: onCreate
  variables:
    - key: IMAGE_NAME
      value: soluto/airbag
    - key: SAMPLE_AUTH_IMAGE
      value: sample-auth
  contexts:
    - acreastus
  triggers:
    - repo: Soluto/airbag
      name: github
      type: git
      events:
        - push.heads
        - pullrequest.opened
      pullRequestAllowForkEvents: false
      commentRegex: /.*/gi
      branchRegex: /.*/gi
      branchRegexInput: regex
      provider: github
      disabled: false
      verified: true
      context: github-verified
      contexts: []
      variables: []

  stages:
    - build
    - test
    - push

  steps:
    CloneRepository:
      type: git-clone
      description: Cloning repository
      repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      revision: ${{CF_REVISION}}
      stage: build
      git: github

    BuildImage:
      stage: build
      title: Building sidecar Docker Image
      type: build
      image_name: ${{IMAGE_NAME}}
      tag: ${{CF_REVISION}}
      working_directory: ${{CloneRepository}}
      dockerfile: deployment/Dockerfile

    UnitTests:
      stage: test
      image: mcr.microsoft.com/dotnet/core/sdk:2.2
      title: Unit tests
      working_directory: ${{CloneRepository}}
      commands:
        - dotnet test UnitTests

    BlackboxSetup:
      stage: test
      type: build
      title: Building image for blackbox tests
      image_name: ${{SAMPLE_AUTH_IMAGE}}
      tag: ${{CF_REVISION}}
      working_directory: ${{CloneRepository}}
      dockerfile: deployment/SampleAuthServer-Dockerfile

    BlackboxTests:
      stage: test
      title: Blackbox tests
      working_directory: ${{CloneRepository}}
      type: composition
      composition: /deployment/blackbox-compose.yaml
      composition_candidates:
        blackbox-tests:
          image: mcr.microsoft.com/dotnet/core/sdk:2.2
          command: dotnet test BlackboxTests/BlackboxTests.csproj
          volumes:
            - '${{CF_VOLUME_NAME}}:${{CF_VOLUME_PATH}}'
          working_dir: '${{CF_VOLUME_PATH}}/airbag'
          environment:
            - AIRBAG_URL=http://airbag:5001
            - VALID_AUTH_SERVER_URL=http://valid_auth_server
            - ANOTHER_VALID_AUTH_SERVER_URL=http://another_valid_auth_server
            - AUTH_SERVER_DIFFERENT_ISSUER_URL=http://auth_server_with_different_issuer
            - AUTH_SERVER_DIFFERENT_SIGNATURE_URL=http://auth_server_with_different_signature
            - AIRBAG_WITHOUT_AUD_URL=http://airbag-without-aud-validation:5001

    PushApproval:
      fail_fast: false
      stage: push
      type: pending-approval
      when:
        branch:
          only:
            - master
      title: Push image to Docker Hub?
      timeout:
        duration: 24
        finalState: denied

    Push:
      type: push
      stage: push
      title: Pushing Image to Docker Hub
      registry: dockerhub-tweek
      image_name: ${{IMAGE_NAME}}
      candidate: ${{BuildImage}}
      tags:
        - latest
        - "2.2.0"
      when:
        condition:
          all:
            approved: steps.PushApproval.result == 'approved'
