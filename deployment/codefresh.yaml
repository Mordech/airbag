version: '1.0'
kind: pipeline
metadata:
  name: airbag/build&publish
  project: airbag
spec:
  terminationPolicy:
    - type: branch
      event: onCreate
  variables:
    - key: IMAGE_NAME
      value: airbag
    - key: SAMPLE_AUTH_IMAGE
      value: sample-auth
  contexts:
    - acreastus
  triggers:
    - repo: Soluto/airbag
      name: github
      type: git
      events:
        - push.heads
        - pullrequest.opened
      pullRequestAllowForkEvents: false
      commentRegex: /.*/gi
      branchRegex: /.*/gi
      branchRegexInput: regex
      provider: github
      disabled: false
      verified: true
      context: github-verified
      contexts: []
      variables: []

  stages:
    - build
    - test
    - push

  steps:
    CloneRepository:
      type: git-clone
      description: Cloning repository
      repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      revision: ${{CF_REVISION}}
      stage: build
      git: github

    BuildImage:
      stage: build
      title: Building sidecar Docker Image
      type: build
      image_name: ${{IMAGE_NAME}}
      tag: ${{CF_REVISION}}
      working_directory: ${{CloneRepository}}
      dockerfile: deployment/Dockerfile

    UnitTests:
      stage: test
      image: mcr.microsoft.com/dotnet/core/sdk:2.2
      title: Unit tests
      working_directory: ${{CloneRepository}}
      commands:
        - dotnet test UnitTests

    BlackboxSetup:
      stage: test
      type: build
      title: Building image for blackbox tests
      image_name: ${{SAMPLE_AUTH_IMAGE}}
      tag: ${{CF_REVISION}}
      working_directory: ${{CloneRepository}}
      dockerfile: deployment/SampleAuthServer-Dockerfile

    BlackboxTests:
      stage: test
      title: Blackbox tests
      working_directory: ${{CloneRepository}}
      type: composition
      composition:
        version: '3'
        services:
          airbag:
            image: ${{BuildImage}}
            container_name: airbag
            depends_on:
              - valid_auth_server
              - auth_server_with_different_issuer
              - protected_api
              - opa
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - AUTHORITY=http://valid_auth_server
              - ISSUER=http://localhost:5002
              - AUDIENCE=api1
              - AUTHORITY_ANOTHER=http://another_valid_auth_server
              - ISSUER_ANOTHER=http://localhost:5003
              - AUDIENCE_ANOTHER=api1
              - BACKEND_HOST_NAME=protected_api
              - BACKEND_SERVICE_PORT=8080
              - COLLECT_METRICS=false
              - UNAUTHENTICATED_ROUTES=/isAlive,/foo*
              - OPA_QUERY_PATH=protected_api/allow
              - OPA_MODE=Enabled
              - OPA_URL=http://opa:8181
            ports:
              - '5001:5001'

          airbag-without-aud-validation:
            image: ${{BuildImage}}
            container_name: airbag-without-aud-validation
            depends_on:
              - valid_auth_server
              - auth_server_with_different_issuer
              - protected_api
              - opa
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - AUTHORITY_ANOTHER=http://valid_auth_server
              - ISSUER_ANOTHER=http://localhost:5002
              - VALIDATE_AUDIENCE_ANOTHER=false
              - BACKEND_HOST_NAME=protected_api
              - BACKEND_SERVICE_PORT=8080
              - COLLECT_METRICS=false
              - UNAUTHENTICATED_ROUTES=/isAlive,/foo*
              - OPA_QUERY_PATH=protected_api/allow
              - OPA_MODE=Enabled
              - OPA_URL=http://opa:8181
            ports:
              - '5006:5001'

          valid_auth_server:
            image: ${{BlackboxSetup}}
            container_name: valid_auth_server
            ports:
              - '5002:80'
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - ISSUER_URI=http://localhost:5002

          another_valid_auth_server:
            image: ${{BlackboxSetup}}
            container_name: another_valid_auth_server
            ports:
              - '5003:80'
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - ISSUER_URI=http://localhost:5003

          auth_server_with_different_issuer:
            image: ${{BlackboxSetup}}
            container_name: auth_server_with_different_issuer
            ports:
              - '5004:80'
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - ISSUER_URI=http://someuri.com:1234

          auth_server_with_different_signature:
            image: ${{BlackboxSetup}}
            container_name: auth_server_with_different_signature
            ports:
              - '5005:80'
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - ISSUER_URI=http://localhost:5002

          protected_api:
            image: jmalloc/echo-server
            container_name: protected_api

          opa:
            image: openpolicyagent/opa
            container_name: opa
            command: run --server /policies
            ports:
              - 8181:8181
            volumes:
              - '/var/lib/docker/volumes/${{CF_VOLUME}}/_data/airbag/open-policy-agent:/policies'

      composition_candidates:
        blackbox-tests:
          image: mcr.microsoft.com/dotnet/core/sdk:2.2
          command: dotnet test BlackboxTests/BlackboxTests.csproj
          volumes:
            - '${{CF_VOLUME_NAME}}:${{CF_VOLUME_PATH}}'
          working_dir: '${{CF_VOLUME_PATH}}/airbag'
          environment:
            - AIRBAG_URL=airbag
            - VALID_AUTH_SERVER_URL=valid_auth_server
            - ANOTHER_VALID_AUTH_SERVER_URL=another_valid_auth_server
            - AUTH_SERVER_DIFFERENT_ISSUER_URL=auth_server_with_different_issuer
            - AUTH_SERVER_DIFFERENT_SIGNATURE_URL=auth_server_with_different_signature
            - AIRBAG_WITHOUT_AUD_URL=airbag-without-aud-validation

    PushApproval:
      fail_fast: false
      stage: push
      type: pending-approval
      when:
        branch:
          only:
            - master
      title: Push image to ACR?
      timeout:
        duration: 24
        finalState: denied

    Push:
      type: push
      stage: push
      title: Pushing Image to ACR
      image_name: ${{IMAGE_NAME}}
      registry: AcrEastUs
      candidate: ${{BuildImage}}
      tag: ${{CF_REVISION}}
      when:
        condition:
          all:
            approved: steps.PushApproval.result == 'approved'
            masterBranch: '"${{CF_BRANCH}}" == "master"'
